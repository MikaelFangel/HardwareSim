import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException {

        // we expect exactly one argument: the name of the input file
        if (args.length != 1) {
            System.err.println("\n");
            System.err.println("hwsim Interpreter\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename = args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        // new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        hwsimLexer lex = new hwsimLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        hwsimParser parser = new hwsimParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        AST result = (AST) interpreter.visit(parseTree);
        // result.eval(new Environment());
        System.out.println("The result is: " + result);
    }
}

// We write an interpreter that implements interface
// "hwsimVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Integer.

class Interpreter extends AbstractParseTreeVisitor<AST> implements hwsimVisitor<AST> {
    public AST visitStart(hwsimParser.StartContext ctx) {
        return visit(ctx.p);
    }

    public AST visitProg(hwsimParser.ProgContext ctx) {
        return null;
    }

    public AST visitMultiLatch(hwsimParser.MultiLatchContext ctx) {
        return new MultiLatch((Latch) visit(ctx.l), (Latch) visit(ctx.ls));
    }

    public AST visitSingleLatch(hwsimParser.SingleLatchContext ctx) {
        return new SingleLatch((Latch) visit(ctx.l));
    }

   public AST visitHardware(hwsimParser.HardwareContext ctx) {
        return null;
    }

    public AST visitInput(hwsimParser.InputContext ctx) {
        return null;
    }

    public AST visitOutput(hwsimParser.OutputContext ctx) {
        return null;
    }

    public AST visitLatch(hwsimParser.LatchContext ctx) {
        return new Latch((LatchDec) visit(ctx.l));
    }

    public AST visitUpdate(hwsimParser.UpdateContext ctx) {
        return null;
    }

    public AST visitSimulate(hwsimParser.SimulateContext ctx) {
        return null;
    }

    public AST visitMultiId(hwsimParser.MultiIdContext ctx) {
        return null;
    }

    public AST visitSingleId(hwsimParser.SingleIdContext ctx) {
        return null;
    }

    public AST visitMultiUpdate(hwsimParser.MultiUpdateContext ctx) {
        return null;
    }

    public AST visitSingleUpdate(hwsimParser.SingleUpdateContext ctx) {
        return null;
    }

    public AST visitSimIn(hwsimParser.SimInContext ctx) {
        return null;
    }

    public AST visitUpdateDec(hwsimParser.UpdateDecContext ctx) {
        return null;
    }

    public AST visitLatchDec(hwsimParser.LatchDecContext ctx) {
        return null;
    }


    public AST visitNegation(hwsimParser.NegationContext ctx) {
        return new Negation((Expr) visit(ctx.c1));
    }

    public AST visitConjunction(hwsimParser.ConjunctionContext ctx) {
        return new Conjunction((Expr) visit(ctx.c1), (Expr) visit(ctx.c2));
    }

    public AST visitDisjunction(hwsimParser.DisjunctionContext ctx) {
        return new Disjunction((Expr) visit(ctx.c1), (Expr) visit(ctx.c2));
    }

    public AST visitParentheses(hwsimParser.ParenthesesContext ctx) {
        return visit(ctx.c1);
    }

    public AST visitVariable(hwsimParser.VariableContext ctx) {
        return new Variable(ctx.x.getText());
    }
}
