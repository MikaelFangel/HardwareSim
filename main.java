import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Impl Interpreter\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	implLexer lex = new implLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	implParser parser = new implParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	AST result = interpreter.visit(parseTree);
	System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Integer.

class Interpreter extends AbstractParseTreeVisitor<Expr> implements implVisitor<Expr> {

    public Expr visitStart(implParser.StartContext ctx){
    	if (ctx.up.getText().equals("update")) {
    		return visit(ctx.e.up);
    	}
    	return visit(ctx.e);
    	
    };
    
    public Expr visitNegation(implParser.NegationContext ctx) {
    	return new Negation(visit(ctx.c1));
    };

    public Expr visitConjunction(implParser.ConjunctionContext ctx) {
    	return new Conjunction(visit(ctx.c1), visit(ctx.c2));
    };

    public Expr visitDisjunction(implParser.DisjunctionContext ctx) {
    	return new Disjunction(visit(ctx.c1), visit(ctx.c2));
    };

    public Expr visitVariable(implParser.VariableContext ctx) {
    	return new Variable(ctx.x.getText());
    };

    public Expr visitParentheses(implParser.ParenthesesContext ctx) {
    	return visit(ctx.c1);
    };


}

